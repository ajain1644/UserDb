[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "add_user",
        "importPath": "Database.db",
        "description": "Database.db",
        "isExtraImport": true,
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "Database.db",
        "description": "Database.db",
        "isExtraImport": true,
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "update_user",
        "importPath": "Database.db",
        "description": "Database.db",
        "isExtraImport": true,
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "importPath": "Database.db",
        "description": "Database.db",
        "isExtraImport": true,
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "importPath": "Database.db",
        "description": "Database.db",
        "isExtraImport": true,
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "add_tool",
        "importPath": "Database.db",
        "description": "Database.db",
        "isExtraImport": true,
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "get_tool",
        "importPath": "Database.db",
        "description": "Database.db",
        "isExtraImport": true,
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pydantic_models.required_pydantic",
        "description": "pydantic_models.required_pydantic",
        "isExtraImport": true,
        "detail": "pydantic_models.required_pydantic",
        "documentation": {}
    },
    {
        "label": "ToolSpec",
        "importPath": "pydantic_models.required_pydantic",
        "description": "pydantic_models.required_pydantic",
        "isExtraImport": true,
        "detail": "pydantic_models.required_pydantic",
        "documentation": {}
    },
    {
        "label": "ToolSpec",
        "importPath": "pydantic_models.required_pydantic",
        "description": "pydantic_models.required_pydantic",
        "isExtraImport": true,
        "detail": "pydantic_models.required_pydantic",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_react_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "AgentExecutor",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "init_chat_model",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "pull",
        "importPath": "langchain.hub",
        "description": "langchain.hub",
        "isExtraImport": true,
        "detail": "langchain.hub",
        "documentation": {}
    },
    {
        "label": "StructuredTool",
        "importPath": "langchain.tools",
        "description": "langchain.tools",
        "isExtraImport": true,
        "detail": "langchain.tools",
        "documentation": {}
    },
    {
        "label": "create_api_tool",
        "importPath": "Apis.tools_api",
        "description": "Apis.tools_api",
        "isExtraImport": true,
        "detail": "Apis.tools_api",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "db_router",
        "importPath": "Apis.db_api",
        "description": "Apis.db_api",
        "isExtraImport": true,
        "detail": "Apis.db_api",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Dynamic_Tool_App\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Dynamic_Tool_App\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Dynamic_Tool_App\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Dynamic_Tool_App\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Dynamic_Tool_App\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Apis.db_api",
        "description": "Apis.db_api",
        "peekOfCode": "class User(BaseModel):\n    name: str\n    email: str\n    password: str\ndb_router = APIRouter(prefix=\"/users\", tags=[\"users\"])\n@db_router.post(\"/adduser\")\nasync def create_user(user: User):\n    await add_user(user)\n    return {\"message\": \"User created successfully\"}\n@db_router.get(\"/getuser\")",
        "detail": "Apis.db_api",
        "documentation": {}
    },
    {
        "label": "db_router",
        "kind": 5,
        "importPath": "Apis.db_api",
        "description": "Apis.db_api",
        "peekOfCode": "db_router = APIRouter(prefix=\"/users\", tags=[\"users\"])\n@db_router.post(\"/adduser\")\nasync def create_user(user: User):\n    await add_user(user)\n    return {\"message\": \"User created successfully\"}\n@db_router.get(\"/getuser\")\nasync def get_user_endpoint(user: User):\n    result = await get_user(user)\n    if result:\n        return {\"user\": result, \"message\": \"User found successfully\"}",
        "detail": "Apis.db_api",
        "documentation": {}
    },
    {
        "label": "convert_objectid_to_str",
        "kind": 2,
        "importPath": "Database.db",
        "description": "Database.db",
        "peekOfCode": "def convert_objectid_to_str(doc):\n    \"\"\"Convert ObjectId to string and make document JSON serializable\"\"\"\n    if doc and \"_id\" in doc:\n        doc[\"_id\"] = str(doc[\"_id\"])\n    return doc\nasync def add_user(user: User):\n    await user_collection.insert_one(user.model_dump())\n    return {\"message\": \"User created successfully\"}\nasync def get_user(user: User):\n    result = await user_collection.find_one({\"email\": user.email})",
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "kind": 5,
        "importPath": "Database.db",
        "description": "Database.db",
        "peekOfCode": "MONGO_URI = \"mongodb://admin:admin123@localhost:27017\"\nclient = AsyncIOMotorClient(MONGO_URI)\ndb = client[\"user_db\"]\nuser_collection = db[\"users\"]\ntool_collection = db[\"tools\"]\ndef convert_objectid_to_str(doc):\n    \"\"\"Convert ObjectId to string and make document JSON serializable\"\"\"\n    if doc and \"_id\" in doc:\n        doc[\"_id\"] = str(doc[\"_id\"])\n    return doc",
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Database.db",
        "description": "Database.db",
        "peekOfCode": "client = AsyncIOMotorClient(MONGO_URI)\ndb = client[\"user_db\"]\nuser_collection = db[\"users\"]\ntool_collection = db[\"tools\"]\ndef convert_objectid_to_str(doc):\n    \"\"\"Convert ObjectId to string and make document JSON serializable\"\"\"\n    if doc and \"_id\" in doc:\n        doc[\"_id\"] = str(doc[\"_id\"])\n    return doc\nasync def add_user(user: User):",
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "Database.db",
        "description": "Database.db",
        "peekOfCode": "db = client[\"user_db\"]\nuser_collection = db[\"users\"]\ntool_collection = db[\"tools\"]\ndef convert_objectid_to_str(doc):\n    \"\"\"Convert ObjectId to string and make document JSON serializable\"\"\"\n    if doc and \"_id\" in doc:\n        doc[\"_id\"] = str(doc[\"_id\"])\n    return doc\nasync def add_user(user: User):\n    await user_collection.insert_one(user.model_dump())",
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "user_collection",
        "kind": 5,
        "importPath": "Database.db",
        "description": "Database.db",
        "peekOfCode": "user_collection = db[\"users\"]\ntool_collection = db[\"tools\"]\ndef convert_objectid_to_str(doc):\n    \"\"\"Convert ObjectId to string and make document JSON serializable\"\"\"\n    if doc and \"_id\" in doc:\n        doc[\"_id\"] = str(doc[\"_id\"])\n    return doc\nasync def add_user(user: User):\n    await user_collection.insert_one(user.model_dump())\n    return {\"message\": \"User created successfully\"}",
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "tool_collection",
        "kind": 5,
        "importPath": "Database.db",
        "description": "Database.db",
        "peekOfCode": "tool_collection = db[\"tools\"]\ndef convert_objectid_to_str(doc):\n    \"\"\"Convert ObjectId to string and make document JSON serializable\"\"\"\n    if doc and \"_id\" in doc:\n        doc[\"_id\"] = str(doc[\"_id\"])\n    return doc\nasync def add_user(user: User):\n    await user_collection.insert_one(user.model_dump())\n    return {\"message\": \"User created successfully\"}\nasync def get_user(user: User):",
        "detail": "Database.db",
        "documentation": {}
    },
    {
        "label": "Property",
        "kind": 6,
        "importPath": "pydantic_models.required_pydantic",
        "description": "pydantic_models.required_pydantic",
        "peekOfCode": "class Property(BaseModel):\n    type: Literal[\"string\", \"boolean\", \"number\", \"integer\", \"object\", \"array\"]\n    description: Optional[str] = None\n# Represents the full \"params\" schema\nclass ParamsSchema(BaseModel):\n    type: Literal[\"object\"] = \"object\"\n    properties: Dict[str, Property]\n    required: List[str]\n# Final tool spec model\nclass ToolSpec(BaseModel):",
        "detail": "pydantic_models.required_pydantic",
        "documentation": {}
    },
    {
        "label": "ParamsSchema",
        "kind": 6,
        "importPath": "pydantic_models.required_pydantic",
        "description": "pydantic_models.required_pydantic",
        "peekOfCode": "class ParamsSchema(BaseModel):\n    type: Literal[\"object\"] = \"object\"\n    properties: Dict[str, Property]\n    required: List[str]\n# Final tool spec model\nclass ToolSpec(BaseModel):\n    name: str\n    description: str\n    method: Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\"]\n    endpoint: str",
        "detail": "pydantic_models.required_pydantic",
        "documentation": {}
    },
    {
        "label": "ToolSpec",
        "kind": 6,
        "importPath": "pydantic_models.required_pydantic",
        "description": "pydantic_models.required_pydantic",
        "peekOfCode": "class ToolSpec(BaseModel):\n    name: str\n    description: str\n    method: Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\"]\n    endpoint: str\n    params: ParamsSchema\nclass User(BaseModel):\n    name: str\n    email: str\n    password: str",
        "detail": "pydantic_models.required_pydantic",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "pydantic_models.required_pydantic",
        "description": "pydantic_models.required_pydantic",
        "peekOfCode": "class User(BaseModel):\n    name: str\n    email: str\n    password: str",
        "detail": "pydantic_models.required_pydantic",
        "documentation": {}
    },
    {
        "label": "agent_tools",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "agent_tools = []\nasync def create_tool_endpoint(tool_details: ToolSpec):\n    await add_tool(tool_details)\n    return {\"success\": \"tool added and created successfully\"}\nasync def get_tooldb():\n    tools = await get_tool()\n    print(\"calling tools \", tools, \"\\n\")\n    tool_for_agent = []\n    for tool in tools:\n        tool_for_agent.append(create_api_tool(spec=tool))",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "agent_tools",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "agent_tools = asyncio.run(get_tooldb())\nprint(\"ai wale tools\", agent_tools)\nllm = init_chat_model(\"gpt-4o\")\ninstructions = \"\"\"you are a helpful ai agent that answers query very preciously\n                  you are having tools that would help you to process users query \n                \"\"\"\nprompt = pull(\"langchain-ai/react-agent-template\")\nprint(agent_tools, \"\\n\\n\")\nagent = create_react_agent(prompt=prompt, llm=llm, tools=agent_tools)\nagent_executor = AgentExecutor(",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "llm = init_chat_model(\"gpt-4o\")\ninstructions = \"\"\"you are a helpful ai agent that answers query very preciously\n                  you are having tools that would help you to process users query \n                \"\"\"\nprompt = pull(\"langchain-ai/react-agent-template\")\nprint(agent_tools, \"\\n\\n\")\nagent = create_react_agent(prompt=prompt, llm=llm, tools=agent_tools)\nagent_executor = AgentExecutor(\n    agent=agent, tools=agent_tools, handle_parsing_errors=True, max_iterations=3\n)",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "instructions",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "instructions = \"\"\"you are a helpful ai agent that answers query very preciously\n                  you are having tools that would help you to process users query \n                \"\"\"\nprompt = pull(\"langchain-ai/react-agent-template\")\nprint(agent_tools, \"\\n\\n\")\nagent = create_react_agent(prompt=prompt, llm=llm, tools=agent_tools)\nagent_executor = AgentExecutor(\n    agent=agent, tools=agent_tools, handle_parsing_errors=True, max_iterations=3\n)\ninput = \"create a user whose name is kk and his email is kk@gmail.com and password is 5247423092490 role will be user\"",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "prompt = pull(\"langchain-ai/react-agent-template\")\nprint(agent_tools, \"\\n\\n\")\nagent = create_react_agent(prompt=prompt, llm=llm, tools=agent_tools)\nagent_executor = AgentExecutor(\n    agent=agent, tools=agent_tools, handle_parsing_errors=True, max_iterations=3\n)\ninput = \"create a user whose name is kk and his email is kk@gmail.com and password is 5247423092490 role will be user\"\nres = agent_executor.invoke(input={\"input\": input, \"instructions\": instructions})\nprint(res)",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "agent = create_react_agent(prompt=prompt, llm=llm, tools=agent_tools)\nagent_executor = AgentExecutor(\n    agent=agent, tools=agent_tools, handle_parsing_errors=True, max_iterations=3\n)\ninput = \"create a user whose name is kk and his email is kk@gmail.com and password is 5247423092490 role will be user\"\nres = agent_executor.invoke(input={\"input\": input, \"instructions\": instructions})\nprint(res)",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "agent_executor",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "agent_executor = AgentExecutor(\n    agent=agent, tools=agent_tools, handle_parsing_errors=True, max_iterations=3\n)\ninput = \"create a user whose name is kk and his email is kk@gmail.com and password is 5247423092490 role will be user\"\nres = agent_executor.invoke(input={\"input\": input, \"instructions\": instructions})\nprint(res)",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "input = \"create a user whose name is kk and his email is kk@gmail.com and password is 5247423092490 role will be user\"\nres = agent_executor.invoke(input={\"input\": input, \"instructions\": instructions})\nprint(res)",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "res = agent_executor.invoke(input={\"input\": input, \"instructions\": instructions})\nprint(res)",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_root():\n    return {\"message\": \"Hello World\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(db_router)\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}",
        "detail": "main",
        "documentation": {}
    }
]